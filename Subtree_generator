import itertools
import numpy as np
import math

iter = [ [1, 2, 3, 4], [0], [0], [0], [0] ] #number of possible children, first entry can't be zero
p = [1, 2, 3, 2]

l = len(iter) #number of parents in tree ~ non leaves

T = np.zeros(l)
g = np.zeros(l)
gen = np.zeros(l)

for i in range(0, len(iter)):
    g[i] = len(iter[i])
    T[i] = g[i]
    for i in range(0,1):
        gen[i] = g[i]
    for i in range(1,len(iter)):
        gen[i] = g[i]-1
T = T.astype(int)
gen = gen.astype(int)

for t in itertools.product(*iter): #all possible combos of iter
    
    fn = np.count_nonzero(t[0:T[0]]) #number of nonzero first gen children
    
    sn = np.count_nonzero(t[T[0]:T[1]+T[0]]) #number of nonzero second gen children
    
    tn = np.count_nonzero(t[T[1]+T[0]:T[2]+T[1]+T[0]]) #number of nonzero third gen children
    
    fon = np.count_nonzero(t[T[2]+T[1]+T[0]:T[3]+T[2]+T[1]+T[0]]) #number of nonzero fourth gen children
    
    fin = np.count_nonzero(t[T[3]+T[2]+T[1]+T[0]:T[4]+T[3]+T[2]+T[1]+T[0]]) #number of nonzero fifth gen children
    
    t = [s for s in t if sn<=t[0] and tn<=t[2] and fon<=t[3] and fin<=t[4]]
    
    if len(t)>0:
        print("Subtree vector:", t) #printing nonempty subtree vectors that have enough parents
        cost = np.sum(t)
        print("cost = ", cost, "*c")
        
        #for num in range(len(p)):
        #prize = sum(p[num])
        #print("prize = ", prize)
